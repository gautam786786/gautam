#Create name space dev 3 
apiVersion: v1
kind: Namespace
metadata: 
  name: dev3

---  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-restapp
  namespace: dev3  #add name space to tell it which name space to use
  labels:
    app: backend-restapp
    tier: backend 
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backend-restapp
  template:
    metadata:
      labels:
        app: backend-restapp
        tier: backend 
    spec: 
      containers:
        - name: backend-restapp
          image: stacksimplify/kube-helloworld:1.0.0
          ports:
            - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: my-backend-service ## VERY VERY IMPORTANT - NGINX PROXYPASS needs this name
  namespace: dev3  #add name space to tell it which name space to use
  labels:
    app: backend-restapp
    tier: backend   
spec:
  #type: ClusterIP is a default service in k8s
  selector:
    app: backend-restapp
  ports:
    - name: http
      port: 8080 # ClusterIP Service Port
      targetPort: 8080 # Container Port

# kubectl apply -f 01-backend-deployment.yml




# Create Deployment for Backend Rest App
# kubectl create deployment my-backend-rest-app --image=stacksimplify/kube-helloworld:1.0.0 
# kubectl get deploy

# # Create ClusterIp Service for Backend Rest App
# kubectl expose deployment my-backend-rest-app --port=8080 --target-port=8080 --name=my-backend-service
# kubectl get svc

# Observation: We don't need to specify "--type=ClusterIp" because default setting is to create ClusterIp Service. 
# Important Note: If backend application port (Container Port: 8080) and Service Port (8080) are same we don't need to use --target-port=8080 but for avoiding the confusion i have added it.

# Backend HelloWorld Application Source kube-helloworld


# Create a LoadBalancer service for load balancing frontend application.
# Important Note: In Nginx reverse proxy, ensure backend service name my-backend-service is updated when you are building the frontend container. We already built it and put ready for this demo (stacksimplify/kube-frontend-nginx:1.0.0)
# Nginx Conf File
# server {
#     listen       80;
#     server_name  localhost;
#     location / {
#     # Update your backend application Kubernetes Cluster-IP Service name  and port below
#     # proxy_pass http://<Backend-ClusterIp-Service-Name>:<Port>;
#     proxy_pass http://my-backend-service:8080;
#     }
#     error_page   500 502 503 504  /50x.html;
#     location = /50x.html {
#         root   /usr/share/nginx/html;
#     }
# }
# Docker Image Location: https://hub.docker.com/repository/docker/stacksimplify/kube-frontend-nginx
# Frontend Nginx Reverse Proxy Application Source kube-frontend-nginx
# # Create Deployment for Frontend Nginx Proxy
# kubectl create deployment my-frontend-nginx-app --image=stacksimplify/kube-frontend-nginx:1.0.0 
# kubectl get deploy

# # Create LoadBalancer Service for Frontend Nginx Proxy
# kubectl expose deployment my-frontend-nginx-app  --type=LoadBalancer --port=80 --target-port=80 --name=my-frontend-service
# kubectl get svc

# # Get Load Balancer IP
# kubectl get svc
# http://<External-IP-from-get-service-output>/hello

# # Scale backend with 10 replicas
# kubectl scale --replicas=10 deployment/my-backend-rest-app

# # Test again to view the backend service Load Balancing
# http://<External-IP-from-get-service-output>/hello